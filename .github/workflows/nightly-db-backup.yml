name: Nightly DB Backup

on:
  # agenda diária às 03:00 UTC
  schedule:
    - cron: "0 3 * * *"
  # permite rodar manualmente
  workflow_dispatch: {}

permissions:
  contents: read

jobs:
  backup:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout (shallow)
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Instalar cliente PostgreSQL
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client

      - name: Preparar pasta
        run: mkdir -p backups

      - name: Dump (IPv4 + TLS + verbose)
        env:
          DB_URL: ${{ secrets.SUPABASE_DB_URL }}
        shell: bash
        run: |
          set -euo pipefail

          # 1) Normaliza URL eliminando espaços e exporta para subprocessos
          export CLEAN="$(printf '%s' "${DB_URL}" | tr -d '[:space:]')"

          # 2) Resolve host para IPv4 (evita IPv6 nos runners do GitHub)
          HOST="$(printf '%s' "$CLEAN" | sed -E 's#^postgres(ql)?://([^@]+@)?([^:/?]+).*#\3#')"
          IPV4="$(getent ahostsv4 "$HOST" | awk 'NR==1{print $1}')"
          if [ -n "$IPV4" ]; then
            export PGHOSTADDR="$IPV4"
          fi

          # 3) Parse robusto da URL com Python -> gera exports em .env-exports
          python3 - <<'PY' > .env-exports
          import os, urllib.parse as u
          s = os.environ['CLEAN'].replace('postgresql://','postgres://', 1)
          p = u.urlparse(s)
          q = u.parse_qs(p.query)
          def out(k,v): print(f'export {k}={v}')
          out('PGUSER',      p.username or 'postgres')
          out('PGPASSWORD',  p.password or '')
          out('PGHOST',      p.hostname)
          out('PGPORT',      p.port or 5432)
          out('PGDATABASE',  p.path.lstrip('/'))
          out('PGSSLMODE',   (q.get('sslmode', ['require'])[0]))
          PY

          # Carrega variáveis para este shell
          source .env-exports

          # 4) Faz o dump (custom) e comprime
          TS="$(date -u +'%Y-%m-%dT%H-%M-%SZ')"
          F="db_${TS}.dump.gz"
          pg_dump --format=custom --no-owner --no-acl | gzip -c > "backups/$F"

          # Exporta nome do arquivo para os próximos steps
          echo "FILENAME=$F" >> "$GITHUB_ENV"

      - name: Enviar para repositório de backups
        env:
          GH_TOKEN: ${{ secrets.BACKUP_PAT }}
        shell: bash
        run: |
          set -euo pipefail
          REPO="${{ secrets.BACKUP_REPO }}"   # ex.: rdsilvalopes/bidly-backups
          F="$FILENAME"

          git config --global user.email "backup-bot@local"
          git config --global user.name  "Backup Bot"

          rm -rf out
          git clone --depth 1 "https://x-access-token:${GH_TOKEN}@github.com/${REPO}.git" out

          cp "backups/$F" out/
          cd out
          git add "$F"
          git commit -m "db: ${F}" || echo "Nada para commitar"
          git push
