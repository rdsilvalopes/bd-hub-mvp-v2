name: Nightly DB Backup

on:
  schedule:
    - cron: "0 3 * * *"   # 03:00 UTC diário
  workflow_dispatch: {}

permissions:
  contents: read

env:
  BACKUP_REPO: ${{ secrets.BACKUP_REPO }}   # rdsilvalopes/bidly-backups
  DB_URL:      ${{ secrets.SUPABASE_DB_URL }}
  GIT_SHA:     ${{ github.sha }}
  GIT_REF:     ${{ github.ref_name }}
  RUN_ID:      ${{ github.run_id }}

jobs:
  backup:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout (shallow)
        uses: actions/checkout@v4
        with: { fetch-depth: 1 }

      - name: Install PostgreSQL client (v17)
        run: |
          sudo apt-get update -y
          sudo apt-get install -y postgresql-client-17

      - name: Prepare folder
        id: prep
        run: |
          TS="$(date -u +'%Y-%m-%dT%H-%M-%SZ')"
          echo "ts=$TS" >> "$GITHUB_OUTPUT"
          mkdir -p backups

      - name: Dump database (force IPv4 + SSL if needed)
        id: dump
        shell: bash
        env:
          TS: ${{ steps.prep.outputs.ts }}
        run: |
          set -euo pipefail

          CLEAN="$(printf '%s' "$DB_URL" | tr -d '[:space:]')"

          HOST="$(printf '%s' "$CLEAN" \
            | sed -E 's#^postgres(ql)?://([^@]+@)?([^/:?]+).*$#\3#')"

          IPV4="$(getent ahostsv4 "$HOST" | awk 'NR==1{print $1}')"
          if [ -n "${IPV4:-}" ]; then
            export PGHOSTADDR="$IPV4"
            echo "Resolved $HOST -> $IPV4"
          else
            echo "WARNING: IPv4 not resolved; following PGHOSTADDR default"
          fi

          case "$CLEAN" in
            *sslmode=*) URI="$CLEAN" ;;
            *)           URI="${CLEAN}?sslmode=require" ;;
          esac
          echo "PGSSLMODE='(unset)'"

          F="db_${TS}.dump.gz"
          # usa a própria URI como --dbname (sem parse frágil)
          pg_dump --dbname="$URI" --format=custom --no-owner --no-acl \
            | gzip -c > "backups/$F"

          echo "file=$F" >> "$GITHUB_OUTPUT"

      - name: Build manifest.json (linka banco ⇄ código)
        id: manifest
        run: |
          set -euo pipefail
          TS="${{ steps.prep.outputs.ts }}"
          FILE="${{ steps.dump.outputs.file }}"
          # pega "migração cabeça" (último arquivo dentro de db/migrations)
          MIGRATION_HEAD="$(ls -1 db/migrations 2>/dev/null | tail -n 1 || true)"

          cat > backups/manifest.json <<'JSON'
          {
            "timestamp_utc": "__TS__",
            "app": {
              "git_sha": "__SHA__",
              "git_ref": "__REF__"
            },
            "db": {
              "dump_file": "__FILE__",
              "pg_dump_version": "__PGDUMP__",
              "migration_head": "__MIG__"
            },
            "run": {
              "github_run_id": "__RUN__",
              "workflow": "Nightly DB Backup"
            }
          }
          JSON

          PGDUMP_VER="$(pg_dump --version | sed 's/.* //')"

          sed -i \
            -e "s/__TS__/${TS}/" \
            -e "s/__SHA__/${GIT_SHA}/" \
            -e "s/__REF__/${GIT_REF}/" \
            -e "s/__FILE__/${FILE}/" \
            -e "s/__PGDUMP__/${PGDUMP_VER}/" \
            -e "s/__MIG__/${MIGRATION_HEAD}/" \
            -e "s/__RUN__/${RUN_ID}/" \
            backups/manifest.json

          echo "manifest=backups/manifest.json" >> "$GITHUB_OUTPUT"

      - name: Upload artifact (local copy)
        uses: actions/upload-artifact@v4
        with:
          name: nightly-${{ steps.prep.outputs.ts }}
          path: |
            backups/${{ steps.dump.outputs.file }}
            ${{ steps.manifest.outputs.manifest }}
          retention-days: 7

      - name: Push to backup repo (keep history)
        env:
          GH_TOKEN: ${{ secrets.BACKUP_PAT }}
        run: |
          set -euo pipefail
          TS="${{ steps.prep.outputs.ts }}"
          FOLDER="daily/${TS:0:10}"                  # daily/AAAA-MM-DD
          DEST="https://github.com/${BACKUP_REPO}.git"

          git clone --depth=1 "$DEST" out
          cd out
          mkdir -p "$FOLDER"
          cp -v ../backups/* "$FOLDER"/

          git config user.name  "Backup Bot"
          git config user.email "backup-bot@users.noreply.github.com"
          git add "$FOLDER"
          git commit -m "nightly: ${TS} (ref=${GIT_REF} sha=${GIT_SHA:0:8})" || echo "No changes to commit"
          git push origin HEAD
